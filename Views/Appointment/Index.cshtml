@model List<Appointment>
@{
    ViewData["Title"] = "Home Page";
}
<div class="calendar">
    <div class="time-column">
        @for (var time = DateTime.Today.AddHours(9); time <= DateTime.Today.AddHours(17); time = time.AddMinutes(30))
        {
            <div class="time-header">@time.ToString("HH:mm")</div>
        }
    </div>

    <div class="appointments-column">
        @foreach (var appointment in Model)
        {
            DateTime appointmentEnd = appointment.Date.Add(appointment.AppointmentLength);

            <div class="appointment"
                 style="top: @(CalculateTopPosition(appointment.Date))%;
                        height: @(CalculateAppointmentHeight(appointment.Date, appointmentEnd))%;">
                <div class="Name">@appointment.Name</div>
                <div class="AnimalType">@appointment.Animal</div>
            </div>
        }
    </div>
</div>
<div style="margin-top: 20px; text-align: center;">
    <a asp-action="Create" class="btn btn-primary">Create Appointment</a>
</div>

<style>
    .calendar {
        display: flex;
        width: 100%;
        height: 100%;
        border: 1px solid #ccc;
    }

    .time-column {
        display: flex;
        flex-direction: column;
        width: 120px;
        border-right: 1px solid #ccc; /* Add border to the right of time column */
    }

    .time-header {
        padding: 5px;
        border-top: 1px solid #ccc;
        border-bottom: 1px solid #ccc;
        height: 30px;
        box-sizing: border-box;
    }

    .appointments-column {
        position: relative;
        flex-grow: 1;
        margin-left: -1px; /* Adjusted margin to align with the time column border */
    }

    .appointment {
        position: absolute;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        padding: 5px;
        overflow: hidden;
        box-sizing: border-box;
    }

    .Name {
        font-weight: bold;
        margin-bottom: 3px;
    }

    .AnimalType {
        font-size: 0.9em;
    }
</style>

@functions {
    double CalculateTopPosition(DateTime startTime)
    {
        TimeSpan fromNineAM = startTime.TimeOfDay - TimeSpan.FromHours(9);
        double percentageFromNineAM = (fromNineAM.TotalMinutes / (8 * 60)) * 100;
        return percentageFromNineAM;
    }

    double CalculateAppointmentHeight(DateTime startTime, DateTime endTime)
    {
        TimeSpan duration = endTime - startTime;
        double appointmentDurationMinutes = duration.TotalMinutes;
        double percentageOfTotalDay = (appointmentDurationMinutes / (8 * 60)) * 100;
        return percentageOfTotalDay;
    }
}
